{
  "original_summary": "**中文摘要：PCI错误恢复机制详解**\n\n本文档由 Linas Vepstas、Richard Lary 和 Mike Mason 撰写，介绍 Linux 内核中用于处理 PCI 总线硬件错误的通用错误恢复 API，旨在防止系统因 PCI 设备故障导致内存损坏或系统崩溃。该机制自 2.6.16 版本起在内核中实现，特别适用于高端平台（如 IBM Power4/5/6 系列）和 PCIe 控制器。\n\n### 一、背景与目标\n现代 PCI 控制器可检测多种硬件错误，包括地址/数据总线奇偶校验错误、SERR 和 PERR 错误。高级芯片组（如 PCIe 和 IBM Power 架构）可在检测到错误后自动隔离故障设备，阻断其所有 I/O 操作，以防止 DMA 导致的内存破坏。随后通过重置设备并重新启用 I/O 实现恢复。此过程需设备驱动与控制器协同完成。\n\n选择在**内核层实现**而非用户空间，主要原因在于：当根文件系统所在存储设备发生断开时，用户态机制难以有效恢复；而大多数文件系统不支持底层块设备的动态断连与重连。相比之下，设备驱动更适于处理此类问题，且已有类似机制（如 SCSI 总线错误处理）可供借鉴。\n\n---\n\n### 二、错误恢复流程概览\n恢复过程分为多个阶段，确保多功能设备（multi-function devices）上多个驱动间的协调：\n\n1. **错误报告阶段**：一旦检测到 PCI 错误，立即通知所有受影响的驱动实例。\n2. **恢复协商阶段**：各驱动表达所需恢复方式（是否需要插槽重置等）。\n3. **执行恢复操作**：根据最严格的请求执行相应恢复动作（如 MMIO 重启用、链路重置、插槽重置）。\n4. **恢复正常运行**：所有驱动完成初始化后，恢复常规 I/O 操作。\n5. **永久失败处理**：若无法恢复，则标记设备为“死亡”，停止所有 I/O。\n\n---\n\n### 三、核心设计：错误恢复 API\n新增一个函数指针结构体字段至 `struct pci_driver`，供驱动注册回调函数。未提供该结构的驱动被视为“非感知型”，平台将采取默认行为（如模拟热插拔移除/添加）。关键回调函数包括：\n\n- `error_detected()`：必须实现。用于同步错误状态，清理资源，禁止新 I/O。\n- `mmio_enabled()`：允许驱动访问 MMIO 进行诊断或局部复位尝试。\n- `slot_reset()`：插槽重置后调用，驱动可重新初始化设备。\n- `resume()`：最终恢复信号，驱动应重启正常 I/O。\n- `cor_error_detected()`（可选）：用于可纠正错误的日志记录。\n\n驱动无需实现全部回调，但只要实现任一，就必须实现 `error_detected()`。未实现的回调表示不依赖其功能。\n\n---\n\n### 四、详细恢复步骤\n\n#### **STEP 0：错误事件**\nPCI 硬件检测到错误。PowerPC 平台会隔离插槽（读返回 0xffffffff，写被忽略）；支持下游端口隔离（DPC）的 PCIe 平台则禁用故障子树的链路，使其不可访问。\n\n#### **STEP 1：通知（error_detected）**\n平台调用所有受影响驱动的 `error_detected()` 回调，作为“静默点”（quiesce point），让驱动终止待处理任务（定时器等），但不得再访问设备。此阶段在任务上下文中执行。\n\n返回值决定后续流程：\n- `PCI_ERS_RESULT_RECOVERED`：设备仍可用；\n- `PCI_ERS_RESULT_CAN_RECOVER`：可通过 I/O 操作恢复；\n- `PCI_ERS_RESULT_NEED_RESET`：需插槽重置；\n- `PCI_ERS_RESULT_DISCONNECT`：放弃恢复。\n\n若任意驱动要求重置，则进入 STEP 4；若全为 CAN_RECOVER，则进入 STEP 2。\n\n> **注意**：PowerPC 当前使用单一线程通知所有驱动，因此不允许在此回调中睡眠或调度，否则影响整体性能。\n\n#### **STEP 2：MMIO 启用（mmio_enabled）**\n平台重新启用 MMIO（通常不启用 DMA），调用 `mmio_enabled()`。这是“早期恢复”阶段，仅允许驱动探测设备、提取诊断信息或触发本地复位，**不得重启正常操作**。\n\n返回值：\n- `_RECOVERED`：认为已恢复；\n- `_NEED_RESET`：仍需插槽重置；\n- `_DISCONNECT`：彻底失败。\n\n若全部返回 `_RECOVERED`，则进入 STEP 3 或 STEP 5；若有任一要求重置，则进入 STEP 4。\n\n> 建议在此阶段同步执行 I/O，避免引发新的错误传播。\n\n#### **STEP 3：链路重置（Link Reset）**\n仅适用于 PCIe，针对可通过重置链路解决的致命错误。完成后设备恢复通信能力。\n\n#### **STEP 4：插槽重置（Slot Reset）**\n对请求重置的设备执行物理或逻辑重置。具体方式平台相关，常见方法包括：\n- 断言 #RST 信号（软重置 / hot-reset）；\n- 断电再通电（热插拔支持）；\n- 根本性重置（fundamental reset，仅限 PCIe，恢复所有寄存器到默认状态）。\n\nPowerPC 支持两种重置：\n- **软重置**：恢复配置空间至“开机初始状态”（BIOS 初始化后），多数设备足够；\n- **根本重置**：部分 PCIe 设备必需，需在驱动 `probe()` 中设置 `needs_freset` 标志。\n\n重置后调用 `slot_reset()` 回调，此时驱动可完全访问设备（含 DMA 和中断），进行固件重载、寄存器配置等。但仍不应启动正常 I/O，等待 `resume()` 调用。\n\n若重置失败，平台可能尝试硬重置（断电循环），若仍无效，则进入永久失败。\n\n#### **STEP 5：恢复操作（Resume Operations）**\n当所有驱动成功完成前述任一恢复阶段并返回 `_RECOVERED` 时，平台调用 `resume()` 回调，通知驱动恢复常规 I/O 活动。此回调无返回值。\n\n此后若再发生错误，将启动新一轮恢复流程。\n\n#### **STEP 6：永久失败（Permanent Failure）**\n设备无法恢复。平台调用 `error_detected()` 并传入 `pci_channel_io_perm_failure` 状态码。\n\n驱动应：\n- 取消所有挂起 I/O；\n- 拒绝新 I/O 请求，返回 `-EIO`；\n- 清理内存资源，退出内核服务，如同系统关闭。\n\n系统通常通知管理员更换设备。但需注意，并非所有“永久”故障都不可逆——过热、接触不良或软件 Bug（如非法 DMA 地址）也可能引发此类错误。\n\n---\n\n### 五、其他重要说明\n\n#### 多功能设备协调\n对于多功能卡，多个驱动需协商谁负责全局初始化（如 Symbios 驱动仅由 function 0 执行设备初始化）。\n\n#### 中断处理策略\n从错误发生到 `slot_reset` 完成期间，**不能保证中断正常送达**。平台应屏蔽相关 IRQ 源，防止死循环。若驱动在错误状态下收到中断，应回返 `IRQ_NOTHANDLED`，由平台处理。\n\n#### 兼容性建议\n即使某些平台（如支持 AER 的 PCIe）在 STEP 1 就能访问设备，也应推迟访问至 STEP 2，以保持与 EEH（Enhanced Error Handling）在 PowerPC 和 s390 上的行为一致。\n\n---\n\n### 六、实际应用与示例\n已有多个主流驱动实现了该 API，可作为参考：\n- SCSI 子系统：ipr, sym53c8xx_2, qla2xxx, lpfc\n- 网络驱动：bnx2, e100, e1000, e1000e, ixgbe, cxgb3, s2io\n\n此外，CXL 驱动展示了如何利用 `cor_error_detected()` 对可纠正错误进行日志增强。\n\n---\n\n### 结论\n该 API 提供了一套标准化、分阶段的 PCI 错误恢复框架，强调内核级处理的优势，尤其适合关键系统组件的容错需求。其实现兼顾灵活性与安全性，支持从轻量级恢复到完整插槽重置的多种场景，是构建高可靠性系统的基石之一。",
  "translated_summary": "**中文摘要：**\n\n本文详细介绍了Linux内核中用于处理PCI总线错误恢复的通用API，旨在为设备驱动程序提供统一机制以应对硬件错误并实现自动恢复。该API自2.6.16版本起在内核中实现，主要应用于支持高级错误检测与恢复能力的PCI控制器（如PCIe及IBM Power系列平台）。\n\n当PCI硬件检测到总线错误（如奇偶校验错误、SERR/PERR信号或链路故障）时，系统首先隔离受影响的设备插槽，阻止所有I/O操作以防止内存损坏等系统性故障。随后进入多阶段恢复流程：\n\n1. **错误通知阶段（error_detected）**：平台调用各受影响驱动的`error_detected()`回调，使其有机会停止I/O、清理资源并返回恢复意愿。返回值包括“已恢复”、“可尝试恢复”、“需插槽重置”或“断开连接”。此为同步点，禁止驱动访问设备。\n\n2. **MMIO启用阶段（mmio_enabled）**：若所有驱动均表示可恢复且无需重置，则平台重新启用MMIO（不包括DMA），允许驱动读取诊断信息或执行本地复位操作，并通过回调反馈是否成功。\n\n3. **链路重置（link reset）**：针对PCIe特有的可恢复致命错误，对通信链路进行重置。\n\n4. **插槽重置（slot_reset）**：若有任一驱动要求重置，则执行插槽级复位。PowerPC平台支持软重置（断言RST信号、恢复配置空间）和基本重置（完全初始化设备状态机与寄存器），后者适用于复杂故障场景。重置后调用`slot_reset()`回调，驱动可重新初始化设备（如下载固件）。\n\n5. **恢复运行（resume）**：所有驱动完成初始化后，平台调用`resume()`通知其恢复正常I/O操作。\n\n6. **永久性故障处理**：若无法恢复，平台标记通道为永久失效，驱动须终止所有I/O、释放资源并退出，类似热拔出行为。操作员可能需物理更换设备。\n\n文章强调该机制必须在内核空间实现，尤其为保障根文件系统所在设备断开时仍能恢复。多数现代驱动已具备类似恢复逻辑（如SCSI层）。设计兼容多功能设备，要求驱动间协调全局操作（如仅由功能0初始化整卡）。\n\n此外，文档说明中断处理策略：错误期间不保证中断传递，平台应屏蔽相关IRQ；驱动在异常状态下收到中断应返回`IRQ_NOTHANDLED`。当前PowerPC实现使用单一线程通知驱动，限制了调度行为。\n\n最后列举了已实现该API的部分驱动示例（如ipr、qla2xxx、e1000系列等），并指出部分特性尚未完全实现。完整细节可参考`Documentation/arch/powerpc/eeh-pci-error-recovery.rst`。\n\n（摘要长度约为原文的25%，涵盖核心结构、流程、关键概念与实现考量。）",
  "comparison_result": {
    "completeness_score": 8,
    "missing_content": "1. 原文明确指出该机制特别适用于**高端平台（如 IBM Power4/5/6 系列）和 PCIe 控制器**，译文中仅泛化为“IBM Power系列平台”，未体现具体型号（Power4/5/6），弱化了适用范围的精确性。\n2. 原文在“背景与目标”部分强调：**大多数文件系统不支持底层块设备的动态断连与重连**，这是选择内核层实现的重要原因之一。译文虽提到根文件系统恢复问题，但未完整传达此关键限制条件。\n3. 原文提到 `cor_error_detected()` 是**可选回调函数，用于可纠正错误的日志记录**，并在“实际应用”中以 CXL 驱动为例说明其用途。译文仅在最后提及“部分特性尚未完全实现”，但未明确说明 `cor_error_detected()` 的存在及其日志增强功能。\n4. 原文在 STEP 2 中强调：**不得重启正常操作**，且建议**同步执行 I/O，避免引发新的错误传播**。译文省略了“不得重启正常操作”的警告，也未提同步 I/O 的建议，影响对安全性的理解。\n5. 原文在 STEP 4 中说明：**若重置失败，平台可能尝试硬重置（断电循环）**，若仍无效才进入永久失败。译文跳过这一中间尝试过程，直接过渡到永久失效，简化了恢复逻辑的完整性。\n6. 原文在“中断处理策略”中明确指出：**从错误发生到 slot_reset 完成期间，不能保证中断正常送达**，平台应屏蔽 IRQ 源。译文表述为“错误期间不保证中断传递”，语义模糊，缺少时间范围界定。\n7. 原文在“兼容性建议”中强调：即使某些平台（如 AER）可在 STEP 1 访问设备，也应推迟至 STEP 2，以保持与 **EEH（Enhanced Error Handling）在 PowerPC 和 s390 上的行为一致**。该跨架构一致性设计原则在译文中完全缺失。\n8. 原文列出多个已实现 API 的驱动示例时分类呈现：**SCSI 子系统** 和 **网络驱动** 分别列举，并单独指出 CXL 驱动使用 `cor_error_detected()`。译文合并列举，丢失分类结构及 CXL 驱动的具体作用示例。",
    "suggestions": "1. 补充原文中关于 IBM Power4/5/6 的具体型号信息，提升技术准确性。\n2. 明确加入“多数文件系统不支持底层块设备动态断连与重连”这一设计动机，强化内核实现必要性的论述。\n3. 增加对 `cor_error_detected()` 回调的描述，包括其可选性、用途（日志记录可纠正错误）以及 CXL 驱动的实际应用案例。\n4. 在 MMIO 启用阶段补充“禁止重启正常 I/O 操作”和“建议同步执行 I/O”的安全提示。\n5. 在插槽重置阶段补充“平台可能尝试硬重置（断电再通电）”作为永久失败前的最后尝试步骤。\n6. 精确表述中断不可靠的时间窗口：“从错误发生到 slot_reset 完成期间”，并强调平台需主动屏蔽 IRQ。\n7. 补充兼容性建议中的关键点：为保持与 EEH 在 PowerPC 和 s390 上的一致行为，应推迟设备访问至 STEP 2。\n8. 对驱动示例进行分类整理，区分 SCSI 与网络驱动，并单独说明 CXL 驱动如何利用 `cor_error_detected()` 提升日志能力，体现 API 的扩展性。",
    "raw_result": "- 完整性评分：8分  \n- 遗漏内容：\n  1. 原文明确指出该机制特别适用于**高端平台（如 IBM Power4/5/6 系列）和 PCIe 控制器**，译文中仅泛化为“IBM Power系列平台”，未体现具体型号（Power4/5/6），弱化了适用范围的精确性。\n  2. 原文在“背景与目标”部分强调：**大多数文件系统不支持底层块设备的动态断连与重连**，这是选择内核层实现的重要原因之一。译文虽提到根文件系统恢复问题，但未完整传达此关键限制条件。\n  3. 原文提到 `cor_error_detected()` 是**可选回调函数，用于可纠正错误的日志记录**，并在“实际应用”中以 CXL 驱动为例说明其用途。译文仅在最后提及“部分特性尚未完全实现”，但未明确说明 `cor_error_detected()` 的存在及其日志增强功能。\n  4. 原文在 STEP 2 中强调：**不得重启正常操作**，且建议**同步执行 I/O，避免引发新的错误传播**。译文省略了“不得重启正常操作”的警告，也未提同步 I/O 的建议，影响对安全性的理解。\n  5. 原文在 STEP 4 中说明：**若重置失败，平台可能尝试硬重置（断电循环）**，若仍无效才进入永久失败。译文跳过这一中间尝试过程，直接过渡到永久失效，简化了恢复逻辑的完整性。\n  6. 原文在“中断处理策略”中明确指出：**从错误发生到 slot_reset 完成期间，不能保证中断正常送达**，平台应屏蔽 IRQ 源。译文表述为“错误期间不保证中断传递”，语义模糊，缺少时间范围界定。\n  7. 原文在“兼容性建议”中强调：即使某些平台（如 AER）可在 STEP 1 访问设备，也应推迟至 STEP 2，以保持与 **EEH（Enhanced Error Handling）在 PowerPC 和 s390 上的行为一致**。该跨架构一致性设计原则在译文中完全缺失。\n  8. 原文列出多个已实现 API 的驱动示例时分类呈现：**SCSI 子系统** 和 **网络驱动** 分别列举，并单独指出 CXL 驱动使用 `cor_error_detected()`。译文合并列举，丢失分类结构及 CXL 驱动的具体作用示例。\n\n- 建议：\n  1. 补充原文中关于 IBM Power4/5/6 的具体型号信息，提升技术准确性。\n  2. 明确加入“多数文件系统不支持底层块设备动态断连与重连”这一设计动机，强化内核实现必要性的论述。\n  3. 增加对 `cor_error_detected()` 回调的描述，包括其可选性、用途（日志记录可纠正错误）以及 CXL 驱动的实际应用案例。\n  4. 在 MMIO 启用阶段补充“禁止重启正常 I/O 操作”和“建议同步执行 I/O”的安全提示。\n  5. 在插槽重置阶段补充“平台可能尝试硬重置（断电再通电）”作为永久失败前的最后尝试步骤。\n  6. 精确表述中断不可靠的时间窗口：“从错误发生到 slot_reset 完成期间”，并强调平台需主动屏蔽 IRQ。\n  7. 补充兼容性建议中的关键点：为保持与 EEH 在 PowerPC 和 s390 上的一致行为，应推迟设备访问至 STEP 2。\n  8. 对驱动示例进行分类整理，区分 SCSI 与网络驱动，并单独说明 CXL 驱动如何利用 `cor_error_detected()` 提升日志能力，体现 API 的扩展性。"
  },
  "chunk_count": 328,
  "completeness_score": 8,
  "refine_mode": "targeted"
}