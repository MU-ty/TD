{
  "original_summary": "**中文摘要：**\n\n本文档由Intel工程师Sean V. Kelley撰写，详细阐述了PCI Express系统中“启动中断”（Boot Interrupts）的机制、相关问题及其在BIOS与操作系统层面的缓解措施。\n\n**一、概述**  \n在PCI Express架构中，中断通过MSI或传统的INTx消息（Assert_INTx/Deassert_INTx）表示。集成于核心IO（Core IO）中的IO-APIC负责将来自PCIe设备的legacy INTx消息转换为MSI中断。若IO-APIC被禁用（通过其表项中的掩码位），这些INTx消息将被转发至平台控制器中枢（PCH）。这种带内（in-band）中断机制过去被称为“启动中断”，主要用于不支持IO-APIC的系统或引导阶段。PCIe协议也定义了INTx机制用于I/O设备发出类似传统PCI的电平触发中断。然而，该机制在现代系统中可能引发问题。\n\n**二、问题描述**  \n当INTx消息被转发到PCH时，会触发一个新的中断，而操作系统通常未为此准备处理程序（handler）。长时间未处理的中断会被Linux内核记录为“虚假中断”（Spurious Interrupts）。一旦某IRQ累计达到阈值且持续“无人处理”，内核将自动禁用该IRQ线，并报错“nobody cared”。这会导致共享同一IRQ线的其他合法设备无法正常工作。例如，文档中展示了IRQ 19因无处理程序而被禁用的调用栈信息。\n\n**三、触发条件**  \n当前最可能导致此问题的情况是使用“线程化中断”（threaded interrupts）。这类中断在主处理函数返回后不会立即重新启用中断线，而是保持屏蔽状态直到线程处理完成（即“单发”模式）。若设备频繁产生中断，而处理线程未能及时完成，则可能造成中断堆积甚至栈溢出。\n\n**四、受影响芯片组**  \n该机制存在于AMD/ATI、Broadcom、Intel等多种芯片组中。从Ice Lake（ICX）开始，Core IO内部不再集成IO-APIC，仅保留在PCH中；连接至Core IO PCIe根端口的设备改用原生MSI/MSI-X机制，从而规避此问题。\n\n**五、缓解措施**  \n主要通过PCI quirks机制进行修复：\n\n1. **禁用INTx转发**：优先方案是通过硬件寄存器关闭向PCH的中断路由。\n   - 对Intel® 6300ESB I/O控制器Hub，可通过设置“Alternate Base Address Register”中的BIE位（Boot Interrupt Enable）为1来禁用启动中断。\n   - 对Sandy Bridge至Sky Lake架构的Xeon服务器，可设置Coherent Interface Protocol Interrupt Control寄存器中的`dis_intx_route2pch`等位，阻止INTx消息转发至PCH。\n\n2. **中断处理程序重定向**：若无法关闭路由，则利用PCI中断引脚到INTx的映射表，将原本应处理Core IO中断的handler重定向至PCH对应的中断线，避免虚假中断计数累积。\n\n3. **内核配置选项**：通过`X86_REROUTE_FOR_BROKEN_BOOT_IRQS`配置项控制是否启用中断重定向功能，也可通过启动参数`pci=ioapicreroute`或`pci=noioapicreroute`动态覆盖。\n\n**六、补充文档参考**  \n文档列举了多个Intel芯片组的数据手册作为技术背景参考，包括：\n- Intel® 6300ESB I/O Controller Hub（第5.7.3节）\n- Xeon E5 v3系列数据手册（第6.6.41节）\n- Intel® 6700PXH PCI Hub（第2.15.2节）\n\n最后，作者提供了联系方式以解答有关传统PCI中断的疑问。\n\n（摘要长度约为原文25%，完整保留了结构、关键概念与技术细节。）",
  "translated_summary": "**中文摘要：**\n\n本文由 Sean V Kelley 撰写，系统阐述了在 PCI Express 架构中“启动中断”（Boot Interrupt）机制的技术背景、存在问题及解决方案。核心内容如下：\n\n1. **中断机制概述**：  \n   PCIe 设备通过 MSI 或传统的 INTx 信号（Assert_INTx/Deassert_INTx）发送中断。集成于核心 I/O 的 IO-APIC 可将这些传统中断转换为 MSI 中断。若 IO-APIC 被禁用，则中断消息被转发至平台控制器中枢（PCH），这一过程称为“启动中断”。该机制用于不支持现代中断处理的旧系统。\n\n2. **问题描述**：  \n   当 INTx 中断被转发到 PCH 时，可能触发未注册处理程序的虚假中断。Linux 内核会统计此类未响应中断，一旦达到阈值，将禁用对应 IRQ（如报错“nobody cared”），进而影响共享该中断线的合法设备工作。\n\n3. **触发条件**：  \n   线程化中断（threaded IRQ）最易引发此问题。由于线程化处理需屏蔽中断直至处理完成，若高频率中断持续发生，可能导致中断无法及时响应，甚至堆栈溢出。\n\n4. **受影响芯片组**：  \n   包括 Intel、AMD/ATI 和 Broadcom 等多种芯片组。自 ICX 架构起，核心 I/O 不再集成 IO-APIC，仅 PCH 保留；PCIe 设备应使用原生 MSI/MSI-X，减少对传统机制依赖。\n\n5. **缓解措施**：  \n   - **禁用路由**：通过配置寄存器阻止 INTx 消息转发至 PCH。例如：\n     - Intel® 6300ESB 使用 BIE 位控制启动中断使能；\n     - Sandy Bridge 至 Skylake 架构通过 `dis_intx_route2pch` 等位禁用转发。\n   - **中断重定向**：当无法禁用路由时，利用 PCI 异常处理机制，通过映射表将中断重新导向有效处理路径，避免虚假中断导致 IRQ 被禁用。\n   - 内核提供配置选项 `X86_REROUTE_FOR_BROKEN_BOOT_IRQS`，并可通过 `pci=ioapicreroute` 或 `pci=noioapicreroute` 动态控制重定向行为。\n\n6. **参考文档与示例**：  \n   文中列举多个 Intel 芯片组（如 6300ESB、Xeon E5-v3、6700PXH）的数据手册链接，详细说明不同平台对传统中断的支持方式及其演进。\n\n总结：本文分析了传统 INTx 中断在现代系统中的兼容性问题，提出以硬件配置和内核机制相结合的方式进行规避，并强调向原生 MSI 过渡的重要性，确保系统稳定性与中断可靠性。",
  "comparison_result": {
    "completeness_score": 8,
    "missing_content": "1. 原文明确指出“启动中断”这一术语**过去被称为**（was formerly known as）带内中断机制，译文未体现该历史命名演变。\n2. 原文提到PCIe协议定义INTx机制用于I/O设备发出**类似传统PCI的电平触发中断**（level-triggered interrupts similar to legacy PCI），译文未提及“电平触发”这一关键中断类型特征。\n3. 原文在“问题描述”部分具体举例说明了**IRQ 19因无处理程序被禁用的调用栈信息**，译文仅泛化为“如报错‘nobody cared’”，缺失具体实例。\n4. 原文第五部分提到“利用PCI quirks机制进行修复”，其中“PCI quirks”是特定技术术语，译文简化为“PCI异常处理机制”，存在术语失真。\n5. 原文第六部分“补充文档参考”中列出的是**具体章节编号**（如第5.7.3节、第6.6.41节等），而译文表述为“数据手册链接”和“详细说明……演进”，不仅信息不准确，且引入原文未提的“链接”和“演进”概念，造成偏差。\n6. 原文结尾提到作者提供**联系方式以解答疑问**，译文完全遗漏此信息。",
    "suggestions": "1. 补充“启动中断”曾用名的历史背景，准确传达术语演变。\n2. 明确加入“电平触发中断”（level-triggered interrupt）的技术细节，以完整反映INTx机制特性。\n3. 保留原文关于IRQ 19的具体案例，增强问题描述的实证性与技术准确性。\n4. 将“PCI异常处理机制”更正为“PCI quirks机制”，确保专业术语一致性。\n5. 修改“参考文档”部分表述，删除“链接”与“演进”等误导性词汇，准确还原为“列举多个Intel芯片组数据手册中的具体章节作为技术参考”。\n6. 补充作者提供联系方式的信息，保持原文结构与意图完整性。",
    "raw_result": "- 完整性评分：8分  \n- 遗漏内容：  \n  1. 原文明确指出“启动中断”这一术语**过去被称为**（was formerly known as）带内中断机制，译文未体现该历史命名演变。  \n  2. 原文提到PCIe协议定义INTx机制用于I/O设备发出**类似传统PCI的电平触发中断**（level-triggered interrupts similar to legacy PCI），译文未提及“电平触发”这一关键中断类型特征。  \n  3. 原文在“问题描述”部分具体举例说明了**IRQ 19因无处理程序被禁用的调用栈信息**，译文仅泛化为“如报错‘nobody cared’”，缺失具体实例。  \n  4. 原文第五部分提到“利用PCI quirks机制进行修复”，其中“PCI quirks”是特定技术术语，译文简化为“PCI异常处理机制”，存在术语失真。  \n  5. 原文第六部分“补充文档参考”中列出的是**具体章节编号**（如第5.7.3节、第6.6.41节等），而译文表述为“数据手册链接”和“详细说明……演进”，不仅信息不准确，且引入原文未提的“链接”和“演进”概念，造成偏差。  \n  6. 原文结尾提到作者提供**联系方式以解答疑问**，译文完全遗漏此信息。\n\n- 建议：  \n  1. 补充“启动中断”曾用名的历史背景，准确传达术语演变。  \n  2. 明确加入“电平触发中断”（level-triggered interrupt）的技术细节，以完整反映INTx机制特性。  \n  3. 保留原文关于IRQ 19的具体案例，增强问题描述的实证性与技术准确性。  \n  4. 将“PCI异常处理机制”更正为“PCI quirks机制”，确保专业术语一致性。  \n  5. 修改“参考文档”部分表述，删除“链接”与“演进”等误导性词汇，准确还原为“列举多个Intel芯片组数据手册中的具体章节作为技术参考”。  \n  6. 补充作者提供联系方式的信息，保持原文结构与意图完整性。"
  },
  "chunk_count": 112,
  "completeness_score": 8,
  "refine_mode": "targeted"
}