{
  "original_summary": "**《PCI Express高级错误报告驱动程序指南》中文摘要**\n\n本文档由英特尔公司开发人员撰写，旨在详细介绍PCI Express（PCIe）高级错误报告（Advanced Error Reporting, AER）驱动程序的基本原理、使用方法及设备驱动适配要求。文档结构清晰，涵盖概述、用户指南、开发者指南和常见问题解答四大部分。\n\n---\n\n### 一、概述\n\nPCIe支持两种错误报告机制：基础错误报告（baseline capability）和高级错误报告（AER）。所有PCIe组件必须支持基础能力，而AER作为可选扩展功能，提供更全面的错误检测与处理机制。  \nPCIe AER驱动为系统提供以下三项核心功能：\n1. **收集完整错误信息**；\n2. **向用户上报错误**；\n3. **执行错误恢复操作**。\n\n该驱动仅绑定到支持AER功能的Root Port（根端口）和RCEC（Root Complex Event Collector），不适用于普通终端设备。\n\n---\n\n### 二、用户使用指南\n\n#### 1. 内核配置\nAER驱动是通过PCIe端口总线驱动挂载的根端口服务驱动。启用需在内核编译时开启`CONFIG_PCIEAER`选项，且依赖于`CONFIG_PCIEPORTBUS`。\n\n#### 2. 驱动加载控制\n部分系统固件已实现AER管理。为避免操作系统与固件同时处理AER事件导致冲突，Linux仅在固件通过ACPI _OSC方法将AER控制权移交至OS后，才启用AER功能。\n\n#### 3. 错误输出格式\n当捕获AER错误时，系统会向控制台输出详细日志。根据错误类型区分显示级别：\n- **可纠正错误**：以警告（warning）形式输出；\n- **不可纠正错误**：以错误（error）级别输出。\n\n示例日志包含设备位置（如`0000:50:00.0`）、错误严重性（如“Fatal”）、类型（如事务层错误）、请求者ID（Requester ID）以及TLP报头等关键字段。\n\n#### 4. 错误消息速率限制（Rate Limiting）\n为防止高频错误淹没日志或阻塞系统运行，AER对每设备、每类错误（可纠正/非致命不可纠正）实施速率限制，默认策略为：**5秒内最多允许10条消息**（即`DEFAULT_RATELIMIT_INTERVAL`和`DEFAULT_RATELIMIT_BURST`）。  \n此参数可通过sysfs接口动态调整，具体路径见文档`Documentation/ABI/testing/sysfs-bus-pci-devices-aer`。\n\n#### 5. 错误统计与计数器\nAER还提供详细的错误统计数据，包括各类错误发生次数，均通过sysfs暴露供监控分析，便于故障排查与性能评估。\n\n---\n\n### 三、开发者开发指南\n\n#### 1. PCIe错误分类\n- **可纠正错误**：不影响接口功能，硬件自动修复，无需软件干预。\n- **不可纠正错误**：影响正常通信，进一步分为：\n  - **非致命错误**：仅影响单个事务，链路仍可用；\n  - **致命错误**：导致链路不可靠，必须重置恢复。\n\n#### 2. 错误传播机制\n当设备检测到错误时，会上报至其上级Root Port。Root Port记录错误源（Requester ID）并设置状态寄存器。若启用了错误中断，则触发AER中断通知系统。\n\n> 注意：此类错误属于PCIe层级错误，不包含设备内部特定错误（后者由设备驱动直接处理）。\n\n#### 3. 错误恢复回调机制\n设备驱动需通过`pci_driver.err_handler`注册错误处理回调函数，参与AER错误恢复流程。主要回调包括：\n\n- `error_detected()`：通知驱动发生错误，并返回恢复意图：\n  - `PCI_ERS_RESULT_CAN_RECOVER`：无需重置即可恢复；\n  - `PCI_ERS_RESULT_NEED_RESET`：需要重置；\n  - `PCI_ERS_RESULT_DISCONNECT`：设备无法恢复。\n\n##### （1）可纠正错误处理\n无需恢复动作，AER驱动自动清除状态寄存器并记录日志。\n\n##### （2）不可纠正错误处理\n- **非致命错误**：调用`error_detected(dev, pci_channel_io_normal)`，各相关驱动协商是否需要上游重置。只要任一驱动要求重置，则执行Secondary Bus Reset（次级总线复位）。\n  - 若出错设备为Endpoint，仅复位该设备；\n  - 若其下挂有子设备，则全部受影响。\n  - 特殊情况：Root Complex集成Endpoint无上游端口，采用Function Level Reset（FLR）替代。\n\n- **致命错误**：广播`error_detected(dev, pci_channel_io_frozen)`，强制进行上游重置。即使驱动声称可免重置恢复，最终仍需执行重置，因假设此时链路已不可靠。\n\n---\n\n### 四、常见问题解答\n\n**Q：若设备驱动未实现错误处理回调（err_handler为NULL）？**  \nA：该设备将无法参与错误恢复，系统会打印提示信息标识其为不可恢复设备。\n\n---\n\n### 五、软件错误注入（调试支持）\n\n由于真实硬件错误难以复现，AER支持**软件模拟错误注入**用于测试错误恢复逻辑：\n1. 启用内核配置项：`CONFIG_PCIEAER_INJECT=y/m`；\n2. 系统启动后生成设备节点`/dev/aer_inject`；\n3. 使用用户态工具`aer-inject`（来自GitHub项目[intel/aer-inject](https://github.com/intel/aer-inject.git)）发送伪造错误事件，验证驱动响应行为。\n\n---\n\n### 总结\n\n本指南系统阐述了PCIe AER驱动的设计架构与工作机制，强调了软硬件协同处理错误的重要性。它不仅为系统管理员提供了部署与监控手段，也为设备驱动开发者定义了标准化的错误响应接口，提升了系统的稳定性与可维护性。通过合理配置、日志分析、统计监控与错误注入测试，可有效增强PCIe子系统的容错能力。",
  "translated_summary": "**中文摘要：**\n\n本文档为《PCI Express 高级错误报告驱动程序指南 HOWTO》，由 Intel 公司开发，旨在介绍 PCIe 高级错误报告（AER）驱动程序的基本原理、使用方法及终端设备驱动的兼容性实现。\n\n**一、概述与核心功能**  \nPCIe AER 驱动程序是 Linux 内核中用于支持 PCIe 高级错误报告机制的基础设施，仅附加于支持 AER 功能的根端口和 RCEC 设备。其主要提供三项功能：  \n1. 错误发生时收集完整的错误信息；  \n2. 向用户输出错误日志；  \n3. 执行错误恢复操作。  \n该驱动基于 PCIe 规范中的高级错误报告扩展能力，相较于基础错误报告，提供更精确和详细的错误诊断能力。\n\n**二、用户使用指南**  \n- **编译与加载**：AER 驱动需通过配置 `CONFIG_PCIEAER`（依赖 `CONFIG_PCIEPORTBUS`）编译进内核。若系统固件通过 ACPI _OSC 方法未将 AER 控制权移交操作系统，则 Linux 不处理 AER 事件，以避免冲突。  \n- **错误输出格式**：错误消息输出至控制台，可纠正错误以警告形式显示，不可纠正错误则作为错误打印。示例包含设备 ID（Requester ID）、错误类型、严重性及 TLP 头信息，具体字段定义参考 PCIe 规范。  \n- **速率限制机制**：为防止大量错误消息淹没系统，AER 对可纠正和非致命不可纠正错误实施速率限制（默认每 5 秒最多 10 条），致命错误（含 DPC 错误）不受限。参数可通过 sysfs 接口动态调整。  \n- **错误统计信息**：AER 捕获的错误计数器通过 sysfs 文件系统暴露，便于监控与分析，相关接口文档位于 `Documentation/ABI/testing/sysfs-bus-pci-devices-aer`。\n\n**三、开发者指导**  \n- **错误分类**：PCIe 错误分为可纠正与不可纠正两类。前者不影响功能，由硬件自动恢复；后者影响链路或事务可靠性，进一步分为非致命（仅事务异常）和致命（链路失效）。  \n- **错误处理流程**：设备检测到错误后向根端口发送报告，根端口记录至 AER 寄存器并触发中断（若启用）。注意此机制仅处理链路层错误，不涵盖设备内部错误。  \n- **回调函数机制**：驱动需通过 `pci_driver.err_handler` 提供错误恢复回调函数，遵循 `pci-error-recovery.rst` 规范。  \n  - **可纠正错误**：无需恢复操作，AER 自动清除状态并记录。  \n  - **不可纠正错误**：AER 尝试通过次级总线复位或功能级复位恢复。根据错误严重性调用不同阶段的回调：  \n    - 非致命错误：调用 `error_detected(..., pci_channel_io_normal)`，驱动可返回是否需要重置；若有任一驱动要求重置，则执行。  \n    - 致命错误：调用 `error_detected(..., pci_channel_io_frozen)`，必须执行重置，即使部分驱动认为可恢复。  \n\n**四、常见问题与调试支持**  \n- 若设备驱动未提供错误处理程序（`err_handler` 为空），则该设备无法参与错误恢复，内核将记录提示信息。  \n- **软件错误注入**：为便于调试，内核支持通过 `CONFIG_PCIEAER_INJECT` 启用软件错误注入功能，创建 `/dev/aer_inject` 接口。配合用户态工具 `aer-inject`（来自 GitHub 仓库），可模拟各类 PCIe 错误，验证恢复逻辑。\n\n**总结**：本文全面阐述了 PCIe AER 驱动的设计、配置、运行机制与开发规范，强调错误分类、日志输出、速率控制、统计接口及恢复策略，是开发和维护 PCIe 设备稳定性的关键技术参考文档。",
  "comparison_result": {
    "completeness_score": 8,
    "missing_content": "1. 原文摘要中明确指出文档结构包含“概述、用户指南、开发者指南和常见问题解答四大部分”，译文未提及该整体结构划分，仅以“一、二、三、四”标题概括，弱化了原文的组织逻辑。\n2. 原文中关于**Root Port记录错误源（Requester ID）并设置状态寄存器**这一关键机制在译文中被简化为“记录至AER寄存器”，缺少“设置状态寄存器”的具体动作描述。\n3. 原文在“非致命错误处理”部分特别说明：“若出错设备为Endpoint，仅复位该设备；若其下挂有子设备，则全部受影响。”此细节在译文中缺失。\n4. 原文提到Root Complex集成Endpoint时采用**Function Level Reset（FLR）替代Secondary Bus Reset**，该特殊情况在译文中未体现。\n5. 原文第五部分“软件错误注入”中明确指出用户态工具来自GitHub项目 `[intel/aer-inject](https://github.com/intel/aer-inject.git)`，译文仅泛称“GitHub仓库”，丢失具体项目名称和链接信息。\n6. 原文强调AER驱动是“通过PCIe端口总线驱动挂载的根端口服务驱动”，译文表述为“附加于……设备”，技术定位不够准确，未能传达“服务驱动（service driver）”这一概念。\n7. 原文对错误恢复回调返回值（`PCI_ERS_RESULT_CAN_RECOVER`、`PCI_ERS_RESULT_NEED_RESET`、`PCI_ERS_RESULT_DISCONNECT`）进行了明确定义，译文省略这些枚举值及其含义，影响开发者理解接口行为。",
    "suggestions": "1. 补充文档整体结构说明，如“本文涵盖概述、用户指南、开发者指南与常见问题解答四个部分”，以还原原文信息架构。\n2. 在错误传播机制中增加“Root Port记录请求者ID并设置AER状态寄存器”的完整描述。\n3. 明确补充非致命错误处理中的复位范围差异，特别是Endpoint及其下游设备的影响。\n4. 增加关于Root Complex集成Endpoint使用FLR进行复位的特殊处理说明。\n5. 补全`aer-inject`工具的具体来源链接或项目名，提升可追溯性。\n6. 将“附加于”改为更准确的技术表述，如“AER驱动作为PCIe端口总线驱动下的服务驱动，绑定到支持AER的根端口和RCEC”。\n7. 补充`error_detected()`回调函数返回值的三种结果及其语义，确保开发者能正确实现错误处理逻辑。",
    "raw_result": "- 完整性评分：8分  \n- 遗漏内容：\n  1. 原文摘要中明确指出文档结构包含“概述、用户指南、开发者指南和常见问题解答四大部分”，译文未提及该整体结构划分，仅以“一、二、三、四”标题概括，弱化了原文的组织逻辑。\n  2. 原文中关于**Root Port记录错误源（Requester ID）并设置状态寄存器**这一关键机制在译文中被简化为“记录至AER寄存器”，缺少“设置状态寄存器”的具体动作描述。\n  3. 原文在“非致命错误处理”部分特别说明：“若出错设备为Endpoint，仅复位该设备；若其下挂有子设备，则全部受影响。”此细节在译文中缺失。\n  4. 原文提到Root Complex集成Endpoint时采用**Function Level Reset（FLR）替代Secondary Bus Reset**，该特殊情况在译文中未体现。\n  5. 原文第五部分“软件错误注入”中明确指出用户态工具来自GitHub项目 `[intel/aer-inject](https://github.com/intel/aer-inject.git)`，译文仅泛称“GitHub仓库”，丢失具体项目名称和链接信息。\n  6. 原文强调AER驱动是“通过PCIe端口总线驱动挂载的根端口服务驱动”，译文表述为“附加于……设备”，技术定位不够准确，未能传达“服务驱动（service driver）”这一概念。\n  7. 原文对错误恢复回调返回值（`PCI_ERS_RESULT_CAN_RECOVER`、`PCI_ERS_RESULT_NEED_RESET`、`PCI_ERS_RESULT_DISCONNECT`）进行了明确定义，译文省略这些枚举值及其含义，影响开发者理解接口行为。\n\n- 建议：\n  1. 补充文档整体结构说明，如“本文涵盖概述、用户指南、开发者指南与常见问题解答四个部分”，以还原原文信息架构。\n  2. 在错误传播机制中增加“Root Port记录请求者ID并设置AER状态寄存器”的完整描述。\n  3. 明确补充非致命错误处理中的复位范围差异，特别是Endpoint及其下游设备的影响。\n  4. 增加关于Root Complex集成Endpoint使用FLR进行复位的特殊处理说明。\n  5. 补全`aer-inject`工具的具体来源链接或项目名，提升可追溯性。\n  6. 将“附加于”改为更准确的技术表述，如“AER驱动作为PCIe端口总线驱动下的服务驱动，绑定到支持AER的根端口和RCEC”。\n  7. 补充`error_detected()`回调函数返回值的三种结果及其语义，确保开发者能正确实现错误处理逻辑。"
  },
  "chunk_count": 173,
  "completeness_score": 8,
  "refine_mode": "targeted"
}